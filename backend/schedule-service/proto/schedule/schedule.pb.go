// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/schedule/schedule.proto

package gurdwara_schedule_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DateTime struct {
	DateTime             string   `protobuf:"bytes,1,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DateTime) Reset()         { *m = DateTime{} }
func (m *DateTime) String() string { return proto.CompactTextString(m) }
func (*DateTime) ProtoMessage()    {}
func (*DateTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_897fc524eec70956, []int{0}
}

func (m *DateTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateTime.Unmarshal(m, b)
}
func (m *DateTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateTime.Marshal(b, m, deterministic)
}
func (m *DateTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateTime.Merge(m, src)
}
func (m *DateTime) XXX_Size() int {
	return xxx_messageInfo_DateTime.Size(m)
}
func (m *DateTime) XXX_DiscardUnknown() {
	xxx_messageInfo_DateTime.DiscardUnknown(m)
}

var xxx_messageInfo_DateTime proto.InternalMessageInfo

func (m *DateTime) GetDateTime() string {
	if m != nil {
		return m.DateTime
	}
	return ""
}

type Event struct {
	ID                   string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DateTime             *DateTime `protobuf:"bytes,2,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Organizer            string    `protobuf:"bytes,3,opt,name=organizer,proto3" json:"organizer,omitempty"`
	Description          string    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_897fc524eec70956, []int{1}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Event) GetDateTime() *DateTime {
	if m != nil {
		return m.DateTime
	}
	return nil
}

func (m *Event) GetOrganizer() string {
	if m != nil {
		return m.Organizer
	}
	return ""
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Day struct {
	ID                   string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	DateTime             *DateTime `protobuf:"bytes,2,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Weekday              string    `protobuf:"bytes,3,opt,name=weekday,proto3" json:"weekday,omitempty"`
	Events               []string  `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Day) Reset()         { *m = Day{} }
func (m *Day) String() string { return proto.CompactTextString(m) }
func (*Day) ProtoMessage()    {}
func (*Day) Descriptor() ([]byte, []int) {
	return fileDescriptor_897fc524eec70956, []int{2}
}

func (m *Day) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Day.Unmarshal(m, b)
}
func (m *Day) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Day.Marshal(b, m, deterministic)
}
func (m *Day) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Day.Merge(m, src)
}
func (m *Day) XXX_Size() int {
	return xxx_messageInfo_Day.Size(m)
}
func (m *Day) XXX_DiscardUnknown() {
	xxx_messageInfo_Day.DiscardUnknown(m)
}

var xxx_messageInfo_Day proto.InternalMessageInfo

func (m *Day) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Day) GetDateTime() *DateTime {
	if m != nil {
		return m.DateTime
	}
	return nil
}

func (m *Day) GetWeekday() string {
	if m != nil {
		return m.Weekday
	}
	return ""
}

func (m *Day) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

type Week struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Days                 []*Day   `protobuf:"bytes,2,rep,name=days,proto3" json:"days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Week) Reset()         { *m = Week{} }
func (m *Week) String() string { return proto.CompactTextString(m) }
func (*Week) ProtoMessage()    {}
func (*Week) Descriptor() ([]byte, []int) {
	return fileDescriptor_897fc524eec70956, []int{3}
}

func (m *Week) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Week.Unmarshal(m, b)
}
func (m *Week) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Week.Marshal(b, m, deterministic)
}
func (m *Week) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Week.Merge(m, src)
}
func (m *Week) XXX_Size() int {
	return xxx_messageInfo_Week.Size(m)
}
func (m *Week) XXX_DiscardUnknown() {
	xxx_messageInfo_Week.DiscardUnknown(m)
}

var xxx_messageInfo_Week proto.InternalMessageInfo

func (m *Week) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Week) GetDays() []*Day {
	if m != nil {
		return m.Days
	}
	return nil
}

type Month struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Weeks                []*Week  `protobuf:"bytes,2,rep,name=weeks,proto3" json:"weeks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Month) Reset()         { *m = Month{} }
func (m *Month) String() string { return proto.CompactTextString(m) }
func (*Month) ProtoMessage()    {}
func (*Month) Descriptor() ([]byte, []int) {
	return fileDescriptor_897fc524eec70956, []int{4}
}

func (m *Month) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Month.Unmarshal(m, b)
}
func (m *Month) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Month.Marshal(b, m, deterministic)
}
func (m *Month) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Month.Merge(m, src)
}
func (m *Month) XXX_Size() int {
	return xxx_messageInfo_Month.Size(m)
}
func (m *Month) XXX_DiscardUnknown() {
	xxx_messageInfo_Month.DiscardUnknown(m)
}

var xxx_messageInfo_Month proto.InternalMessageInfo

func (m *Month) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Month) GetWeeks() []*Week {
	if m != nil {
		return m.Weeks
	}
	return nil
}

func init() {
	proto.RegisterType((*DateTime)(nil), "gurdwara.schedule.service.DateTime")
	proto.RegisterType((*Event)(nil), "gurdwara.schedule.service.Event")
	proto.RegisterType((*Day)(nil), "gurdwara.schedule.service.Day")
	proto.RegisterType((*Week)(nil), "gurdwara.schedule.service.Week")
	proto.RegisterType((*Month)(nil), "gurdwara.schedule.service.Month")
}

func init() { proto.RegisterFile("proto/schedule/schedule.proto", fileDescriptor_897fc524eec70956) }

var fileDescriptor_897fc524eec70956 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0xcd, 0xa5, 0xb7, 0x53, 0x50, 0x98, 0x85, 0xc4, 0xe2, 0x65, 0x18, 0x41, 0xb2, 0x8a,
	0x12, 0x71, 0xed, 0x26, 0x52, 0x2a, 0xe8, 0x22, 0xad, 0xb8, 0x1e, 0x3b, 0x87, 0x36, 0x54, 0x93,
	0x32, 0x99, 0xb6, 0xc4, 0x27, 0xf0, 0x11, 0x7c, 0x46, 0x9f, 0x42, 0x32, 0x49, 0x2f, 0x50, 0x0c,
	0x2e, 0xb2, 0x9b, 0x73, 0xfe, 0x3f, 0xdf, 0xfc, 0xfc, 0x43, 0xe0, 0x6c, 0x2e, 0x13, 0x95, 0x5c,
	0xa7, 0xe3, 0x29, 0x8a, 0xc5, 0x3b, 0x6e, 0x0e, 0x9e, 0xde, 0x93, 0x93, 0xc9, 0x42, 0x8a, 0x15,
	0x97, 0xdc, 0xdb, 0x08, 0x29, 0xca, 0x65, 0x34, 0x46, 0x76, 0x05, 0xed, 0x80, 0x2b, 0x1c, 0x45,
	0x1f, 0x48, 0x7a, 0xd0, 0x16, 0xe5, 0xd9, 0x31, 0xa8, 0xe1, 0x76, 0xc2, 0xcd, 0xcc, 0xbe, 0x0d,
	0x68, 0x3c, 0x2c, 0x31, 0x56, 0xe4, 0x10, 0xcc, 0x41, 0x50, 0xea, 0xe6, 0x20, 0x20, 0xf7, 0x3b,
	0x5f, 0x99, 0xd4, 0x70, 0xbb, 0xfe, 0xa5, 0xf7, 0xe7, 0x7d, 0xde, 0xfa, 0xb2, 0x2d, 0x9a, 0x9c,
	0x42, 0x27, 0x91, 0x13, 0x1e, 0x47, 0x9f, 0x28, 0x1d, 0x4b, 0x73, 0xb7, 0x0b, 0x42, 0xa1, 0x2b,
	0x30, 0x1d, 0xcb, 0x68, 0xae, 0xa2, 0x24, 0x76, 0x6c, 0xad, 0xef, 0xae, 0xd8, 0x97, 0x01, 0x56,
	0xc0, 0xb3, 0xfa, 0x83, 0x39, 0xd0, 0x5a, 0x21, 0xce, 0x04, 0xcf, 0xca, 0x58, 0xeb, 0x91, 0x1c,
	0x43, 0x13, 0xf3, 0x32, 0x52, 0xc7, 0xa6, 0x96, 0xdb, 0x09, 0xcb, 0x89, 0x3d, 0x82, 0xfd, 0x8a,
	0x38, 0xdb, 0x8b, 0xe2, 0x83, 0x2d, 0x78, 0x96, 0x3a, 0x26, 0xb5, 0xdc, 0xae, 0x7f, 0x5e, 0x19,
	0x23, 0x0b, 0xb5, 0x97, 0x3d, 0x43, 0xe3, 0x29, 0x89, 0xd5, 0x74, 0x0f, 0x76, 0x07, 0x8d, 0x3c,
	0xc7, 0x9a, 0x76, 0x51, 0x41, 0xcb, 0xc3, 0x84, 0x85, 0xdb, 0xff, 0x31, 0xe1, 0x68, 0x58, 0x1a,
	0x86, 0x85, 0x4e, 0x5e, 0xa0, 0xdd, 0x47, 0x55, 0xbc, 0xeb, 0x7f, 0xca, 0xe9, 0xd1, 0x0a, 0x93,
	0x4e, 0xcb, 0x0e, 0x6e, 0x0c, 0x32, 0x84, 0x66, 0x1f, 0x55, 0xfe, 0x26, 0x35, 0x42, 0x47, 0xd0,
	0xea, 0xa3, 0xd2, 0xf5, 0xd6, 0x48, 0x2d, 0x1a, 0x28, 0x8a, 0xae, 0x0f, 0xfb, 0xd6, 0xd4, 0x3f,
	0xde, 0xed, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x76, 0x60, 0x85, 0x99, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ScheduleService service

type ScheduleServiceClient interface {
	GetEvent(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetEventClient, error)
	GetDay(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetDayClient, error)
	GetWeek(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetWeekClient, error)
	GetMonth(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetMonthClient, error)
}

type scheduleServiceClient struct {
	c           client.Client
	serviceName string
}

func NewScheduleServiceClient(serviceName string, c client.Client) ScheduleServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "gurdwara.schedule.service"
	}
	return &scheduleServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *scheduleServiceClient) GetEvent(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetEventClient, error) {
	req := c.c.NewRequest(c.serviceName, "ScheduleService.GetEvent", &DateTime{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &scheduleServiceGetEventClient{stream}, nil
}

type ScheduleService_GetEventClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Month, error)
}

type scheduleServiceGetEventClient struct {
	stream client.Streamer
}

func (x *scheduleServiceGetEventClient) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetEventClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetEventClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetEventClient) Recv() (*Month, error) {
	m := new(Month)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scheduleServiceClient) GetDay(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetDayClient, error) {
	req := c.c.NewRequest(c.serviceName, "ScheduleService.GetDay", &DateTime{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &scheduleServiceGetDayClient{stream}, nil
}

type ScheduleService_GetDayClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Month, error)
}

type scheduleServiceGetDayClient struct {
	stream client.Streamer
}

func (x *scheduleServiceGetDayClient) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetDayClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetDayClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetDayClient) Recv() (*Month, error) {
	m := new(Month)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scheduleServiceClient) GetWeek(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetWeekClient, error) {
	req := c.c.NewRequest(c.serviceName, "ScheduleService.GetWeek", &DateTime{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &scheduleServiceGetWeekClient{stream}, nil
}

type ScheduleService_GetWeekClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Month, error)
}

type scheduleServiceGetWeekClient struct {
	stream client.Streamer
}

func (x *scheduleServiceGetWeekClient) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetWeekClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetWeekClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetWeekClient) Recv() (*Month, error) {
	m := new(Month)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scheduleServiceClient) GetMonth(ctx context.Context, in *DateTime, opts ...client.CallOption) (ScheduleService_GetMonthClient, error) {
	req := c.c.NewRequest(c.serviceName, "ScheduleService.GetMonth", &DateTime{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &scheduleServiceGetMonthClient{stream}, nil
}

type ScheduleService_GetMonthClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Month, error)
}

type scheduleServiceGetMonthClient struct {
	stream client.Streamer
}

func (x *scheduleServiceGetMonthClient) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetMonthClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetMonthClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetMonthClient) Recv() (*Month, error) {
	m := new(Month)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ScheduleService service

type ScheduleServiceHandler interface {
	GetEvent(context.Context, *DateTime, ScheduleService_GetEventStream) error
	GetDay(context.Context, *DateTime, ScheduleService_GetDayStream) error
	GetWeek(context.Context, *DateTime, ScheduleService_GetWeekStream) error
	GetMonth(context.Context, *DateTime, ScheduleService_GetMonthStream) error
}

func RegisterScheduleServiceHandler(s server.Server, hdlr ScheduleServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ScheduleService{hdlr}, opts...))
}

type ScheduleService struct {
	ScheduleServiceHandler
}

func (h *ScheduleService) GetEvent(ctx context.Context, stream server.Streamer) error {
	m := new(DateTime)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ScheduleServiceHandler.GetEvent(ctx, m, &scheduleServiceGetEventStream{stream})
}

type ScheduleService_GetEventStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Month) error
}

type scheduleServiceGetEventStream struct {
	stream server.Streamer
}

func (x *scheduleServiceGetEventStream) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetEventStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetEventStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetEventStream) Send(m *Month) error {
	return x.stream.Send(m)
}

func (h *ScheduleService) GetDay(ctx context.Context, stream server.Streamer) error {
	m := new(DateTime)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ScheduleServiceHandler.GetDay(ctx, m, &scheduleServiceGetDayStream{stream})
}

type ScheduleService_GetDayStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Month) error
}

type scheduleServiceGetDayStream struct {
	stream server.Streamer
}

func (x *scheduleServiceGetDayStream) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetDayStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetDayStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetDayStream) Send(m *Month) error {
	return x.stream.Send(m)
}

func (h *ScheduleService) GetWeek(ctx context.Context, stream server.Streamer) error {
	m := new(DateTime)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ScheduleServiceHandler.GetWeek(ctx, m, &scheduleServiceGetWeekStream{stream})
}

type ScheduleService_GetWeekStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Month) error
}

type scheduleServiceGetWeekStream struct {
	stream server.Streamer
}

func (x *scheduleServiceGetWeekStream) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetWeekStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetWeekStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetWeekStream) Send(m *Month) error {
	return x.stream.Send(m)
}

func (h *ScheduleService) GetMonth(ctx context.Context, stream server.Streamer) error {
	m := new(DateTime)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ScheduleServiceHandler.GetMonth(ctx, m, &scheduleServiceGetMonthStream{stream})
}

type ScheduleService_GetMonthStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Month) error
}

type scheduleServiceGetMonthStream struct {
	stream server.Streamer
}

func (x *scheduleServiceGetMonthStream) Close() error {
	return x.stream.Close()
}

func (x *scheduleServiceGetMonthStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *scheduleServiceGetMonthStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *scheduleServiceGetMonthStream) Send(m *Month) error {
	return x.stream.Send(m)
}
